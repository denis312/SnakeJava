import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

public class SnakeGame extends JFrame {
    private static final float SCORE_MULTIPLIER = 0.3f;

    String title = "Snake";
    Color background = Color.BLACK;
    int delay = 100;
    private static int applesEaten;
    private static int score;
    

    static final int FIELD_CELL_COUNT = 20;
    Color fieldColor = Color.GRAY;

    private int snakeLenght = 4;
    Color snakeColor = Color.GREEN;
    Color appleColor = Color.RED;
    private int[][] snake = new int[snakeLenght][2];
    private int snakeDX = 1; int snakeDY = 0;

    
    private int appleX, appleY;
    
    boolean isPlaying = true;

    void start() {
    	
    	createApple();
    	createSnake();
    	
    }

    void update() {
        if (!isPlaying) return;

        moveSnake();
        checkSnakeCollisionWithWalls();
        checkSnakeCollisionWithSnake();
        checkSnakeCollisionWithApple();
        
    }

    void draw(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        RenderingHints hints = new RenderingHints(
            RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON
        );
        g2.setRenderingHints(hints);

        drawField(g2);
        drawSnake(g2);
        drawApple(g2);
        drawScore(g2);
        if (!isPlaying) {
            drawScoreAtTheEnd(g2);
        }
    }

    void input(int keyCode) {
        if (keyCode == KeyEvent.VK_ESCAPE) {
            System.exit(0);
        } // else if / switch...

        if (!isPlaying) return;

        switch (keyCode) {
            case KeyEvent.VK_UP:
                turnSnakeUp();
                break;
            case KeyEvent.VK_DOWN:
                turnSnakeDown();
                break;
            case KeyEvent.VK_LEFT:
                turnSnakeLeft();
                break;
            case KeyEvent.VK_RIGHT:
                turnSnakeRight();
                break;
        }
    }

    // 					FIELD
    void drawField(Graphics2D g2) {
        int fieldSize = Math.min(getWidth(), getHeight());
        int cellSize = fieldSize / FIELD_CELL_COUNT;
        

        int centerShiftX = (getWidth() - fieldSize) / 2;
        int centerShiftY = (getHeight() - fieldSize) / 2;

        g2.setPaint(fieldColor);
        for (int y = 0; y < FIELD_CELL_COUNT; ++y) {
            for (int x = 0; x < FIELD_CELL_COUNT; ++x) {
                g2.fillRect(
                    centerShiftX + x * cellSize,
                    centerShiftY + y * cellSize,
                    cellSize - 1,
                    cellSize - 1
                );
            }
        }
//        if (!isPlaying) {
//        drawScoreAtTheEnd(g2);
//    }
    }


    
    // 				SNAKE
    void createSnake() {
        snakeColor = Color.GREEN;
        snake = new int[snakeLenght][2];
        snakeDX = 1;
        snakeDY = 0;
    }
    void drawSnake(Graphics2D g2) {
        int fieldSize = Math.min(getWidth(), getHeight());
        int cellSize = fieldSize / FIELD_CELL_COUNT;

        int centerShiftX = (getWidth() - fieldSize) / 2;
        int centerShiftY = (getHeight() - fieldSize) / 2;
   
        g2.setPaint(snakeColor);
        for (int i = 0; i < snakeLenght; ++i) {
            int x = snake[i][0];
            int y = snake[i][1];
            if (i == snakeLenght-1) { 
                g2.setColor(Color.yellow); 
              } else {
                g2.setColor(Color.green);}

            if (isInsideField(x, y)) {
                g2.fillRect(
                    centerShiftX + x * cellSize,
                    centerShiftY + y * cellSize,
                    cellSize - 1,
                    cellSize - 1
                );
            }
        }
    }

    void moveSnake() {
        int head = snakeLenght - 1;
        for (int i = 0; i < head; ++i) {
            snake[i][0] = snake[i + 1][0];
            snake[i][1] = snake[i + 1][1];
        }
        snake[head][0] += snakeDX;
        snake[head][1] += snakeDY;
    }

    boolean isInsideField(int x, int y) {
        return (x >= 0 && x < FIELD_CELL_COUNT) &&
               (y >= 0 && y < FIELD_CELL_COUNT);
    }
 
    void checkSnakeCollisionWithWalls() {
 
        int head = snakeLenght - 1;
        int headX = snake[head][0];
        int headY = snake[head][1];

        if (!isInsideField(headX, headY)) {
            isPlaying = false;
        }
    }
    void checkSnakeCollisionWithApple() {
    	 
        int head = snakeLenght - 1;
        int headX = snake[head][0];
        int headY = snake[head][1];

        if (appleX == headX && appleY == headY) {
        	 growSnake();
            ++applesEaten;
        	score += (int) (Math.ceil(applesEaten * SCORE_MULTIPLIER ));
        
            createApple();
           
        }
    }
    void checkSnakeCollisionWithSnake() {
    	 
        int head = snakeLenght - 1;
        int headX = snake[head][0];
        int headY = snake[head][1];
        
        for(int i = 0;i < head; ++i  ) {
        	int segmentX = snake[i][0];
        	int segmentY = snake[i][1];
 
        if (headX == segmentX && headY == segmentY) {
            isPlaying = false;
            break;
        }
        }
    }
    void growSnake () {
    	int [][] temp = new int [snakeLenght + 1][2];
    	int i;
    	for ( i = 0; i < snakeLenght; i++) {
    		temp [i][0]= snake [i][0];
    		temp [i][1]= snake [i][1];
    	}
    	temp [i][0] = temp [i - 1][0];
    	temp [i][1]	= temp [i - 1][1];
    	snake = temp;
    	 ++snakeLenght;
    }

    void turnSnakeUp() {
        if (snakeDY != 1) {
            snakeDX = 0;
            snakeDY = -1;
        }
    }

    void turnSnakeDown() {
        if (snakeDY != -1) {
            snakeDX = 0;
            snakeDY = 1;
        }
    }

    void turnSnakeLeft() {
        if (snakeDX != 1) {
            snakeDX = -1;
            snakeDY = 0;
        }
    }
 
    void turnSnakeRight() {
        if (snakeDX != -1) {
            snakeDX = 1;
            snakeDY = 0;
        }
    }
    
    
    // 				APPLE
    void createApple() {
    	do {
    	appleX = random (0, FIELD_CELL_COUNT);
    	appleY = random (0, FIELD_CELL_COUNT);
    	for (int i = 0; i < snakeLenght; ++i) {
    		int snakeSegmentX = snake [i][0];
      		int snakeSegmentY = snake [i][1];
      		if (appleX == snakeSegmentX && appleY == snakeSegmentY) {
      			break;
      		}
      		break;
    	}
    	} while (false); 
    
    
    }
    
    void drawApple(Graphics2D g2) {
    	  int fieldSize = Math.min(getWidth(), getHeight());
          int cellSize = fieldSize / FIELD_CELL_COUNT;

          int centerShiftX = (getWidth() - fieldSize) / 2;
          int centerShiftY = (getHeight() - fieldSize) / 2;

          g2.setPaint(appleColor);
        
   
                  g2.fillRect(
                      centerShiftX + appleX * cellSize,
                      centerShiftY + appleY * cellSize,
                      cellSize - 1,
                      cellSize - 1
                  );
     
          }

    
    
    // 				RANDOM
    static int random (int max, int min) {
    	return (int) (min + Math.random() * (max-min));
    }
	static void drawScoreAtTheEnd(Graphics2D g2) {

		g2.setColor(Color.RED);
        Font font = new Font("Arial", Font.PLAIN, 50);
        g2.setFont(font);
        g2.drawString("Вы проиграли", 800, 400);
        g2.drawString("Ваш счёт : " + score, 820, 470);
	}
    static void drawScore (Graphics2D g2) {
        g2.setColor(Color.BLUE);
        Font font = new Font("Arial", Font.PLAIN, 50);
        g2.setFont(font);
       // g2.drawString("Ваш счёт : " + applesEaten, 100, 150);
        g2.drawString("Ваш счёт : " + score, 100, 150);
    }
    
	   
    	 
  

    public SnakeGame() {
        setTitle(title);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        DrawPanel panel = new DrawPanel();
        panel.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                input(e.getKeyCode());
            }
        });
        add(panel);

        javax.swing.Timer timer = new javax.swing.Timer(delay, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                update();
                repaint();
            }
        });

        setUndecorated(true);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setVisible(true);

        start();
        timer.start();
    }

    public static void main(String[] args) {
        new SnakeGame();
    }

    class DrawPanel extends JPanel {
        public DrawPanel() {
            setBackground(background);
            setFocusable(true);
            requestFocusInWindow();
            setDoubleBuffered(true);
        }

        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            draw(g);
        }
    }

}

